[プログラムの説明]
<演習1>
クラス変数counterをクラス外から参照と操作ができないようprivateを文頭に書いておく。また、クラス変数stepがクラスメソッドを介してのみ取得・変更できるようにstatic装飾子をつけておく。次に、counterの値によってstepの値を変えて、そのstepの値をcounterに足していき、それらの変数の値を返すコンストラクタ(ExId())をつくる。また、getStep、getMaxId、setStepの三つのクラスメソッドをつくり、counterを取得し、stepを変更、取得できるようにする。そして、識別番号を取得するインスタンスメソッドであるgetId()をつくる。ExIdTesterクラスでは、識別番号をExId()を使い代入する変数を6つつくり、それぞれgetId()、getStep()、getMaxId()で識別番号、増分値、最後に与えた識別番号を求める。この際、counterはstatic装飾子がついているため、a.counterのようにをクラス外から参照するとエラーが出る。
<演習2>
最大値を求めるメソッドの名称をMax、最小値を求めるメソッドの名称をMinとして、異なる引数(2つの値、3つの値、配列に保持された個数の値)をとるクラスメソッドをつくる。MinMaxTesterクラスでは、先ほどのクラスで作ったクラスメソッドを使って最大値、最小値を求める。
<演習3>
Dayクラスでは、プログラム実行時の日付を取得するために、既存クラスであるLocalDateを使って年、月、日をそれぞれ求めて変数year、month、dateに代入する。また、引数として年、年と月、年と月と日の値をとる3つのコンストラクタDay(int year)、Day(int year,int month)、Day(int year,int month,int date)を作り、年を表す引数が負の値なら0に直して変数に代入し、月を表す引数が0以下なら1、13以上なら12に直して変数に代入し、日を表す引数がうるう年などを含め、年、月によってあり得るような値であるか判定して変数に代入する。また、日付操作に関するメソッドは他の日付との前後関係(より前か)を判定するインスタンスメソッドと2つの日付の前後関係を判定するクラスメソッドを作った。DayTesterクラスではコンストラクタを使い、2つの日付の組を作り、それを先程作ったメソッドで判定した。
<課題>
アクセス性をprivateとしたstatic修飾子をつけた変数base、同じくprivateの変数valueをつくる。次に、クラスメソッドsetBase(int a)でaが2以上16以下でない場合baseにaを代入しないように気をつけながら条件に当てはまる場合のみ代入するようにつくる。また、ソッドgetBaseによりbaseの値を返却するようにする。そして、コンストラクタBinHexValでvalueを引数が正の値である場合初期化し、valueのセッタとゲッタであるgetValue()、setValue(int a) をつくる。最後にtoStringメソッドを参考資料をもとに、ユークリッド互除法の要領でつくる。テスタークラスでは要素数を4とした配列に数字を1つずつ入れて、クラスメソッドsatBaseで何進数かを初期化する。そして今が何進数の表示わかるようにgetBaseメソッドを使いながらそれぞれの要素にtoString()メソッドを使いN進数表記したvalueの値の文字列を取得する。
[まとめ]
クラスメソッドとインスタンスメソッドの使いわけについて学んだ。インスタンスメソッドはインスタンスに依存する処理をするため、メソッドを呼び出す前にインスタンスを作る必要がある。また、多くの要素にメソッドで処理を行いたいとき、それぞれの要素にメソッドを適用するようにプログラムを作らないといけない。また、クラスメソッドはインスタンスに依存していないが、インスタンスを参照する処理をすることができない。しかし、多くの要素に一気にメソッド処理をすることができるのでクラスレベルでのデータ変更が簡単にできる。
[理解度]
B
[感想]
クラスメソッドとインスタンスメソッドの使い分けをすることでよりメモリ使用量が減るようなプログラムが書けるのではないかと感じた。
[特記事項]
(追記)演習2において最大最小判定をメソッド内のみで処理し、値を返すことが可能でした。変数aをフィールドとして持つ必要は全くありませんでした。ご指摘ありがとうございます。
