
[プログラムの説明]
<演習1>
まず、Plane2Dインタフェースをつくり、周囲の長さを取得するメソッド、面積を求めるメソッドの二つの、戻り値や引数を持たない抽象メソッドを宣言する。次に、抽象クラスShapeをつくり、そこでjava.lang.Objectクラスのメソッドを抽象メソッドとしてオーバライドしたメソッドである。toStringと図形の描画をするための抽象メソッドdrawと図形情報の表示と図形の描画を行うメソッドprintを実装する。そして、Plane2Dインタフェースを実装する、かつShapeクラスの派生クラスであるParallelogramクラスとRectangleクラスをつくる。Parallelogramクラスでは、もともとあるプログラムに加えて、オーバライドした面積をもとめる抽象メソッドgetAreaと図形の周りの長さを求める抽象メソッドgetPerimeterを実装する。同じくRectangleクラスでももともとあるプログラムに加えて、オーバライドした面積をもとめる抽象メソッドgetAreaと図形の周りの長さを求める抽象メソッドgetPerimeterを実装する。テスタークラスではShape型の配列p1にRectangleクラスとParallelogramクラスのインスタンスの参照を格納する。そして配列の要素がPlane2Dのインスタンスでもあるなら面積と周囲の長さを表示させる。

<演習2>
まず、FIghterインターフェースをつくり、抽象メソッドattackを宣言する。次に、同じくインターフェースWizardをつくり、抽象メソッドfireを宣言する。そして、enemyクラスをFIghterインターフェースを実装するようにして、attackメソッドを実装する。また、HeroクラスをFighterインターフェース、Wizardインターフェースを実装するように修正し、attackメソッド、fireメソッドを実装する。多重継承ができているのを確認できた。テスタークラスでは、通常攻撃に加えて魔法攻撃ができるように、先ほど実装したfireメソッドを使い、選択により魔法攻撃ができるようにする。
(余談)魔法攻撃に種類をつけ、確率で会心攻撃、暴発が起きるようにした。

<課題>
まず、抽象クラスFunctionQIをつくり、protectedな文字列のフィールドnameとそれを引数の値で初期化するコンストラクタ、nameの文字列を返すオーバライドしたメソッドtoStringは関数値f(x)を返却する抽象メソッドfを実装する。次に、インタフェースUpperBoundedをつくり、は第一象限で座標(x, y)がy'=f(x) よりも下側にあるか否かを返すための抽象メソッドinsideを宣言する。そして、インタフェースUpperBoundedを実装するためのクラスAndではUpperBoundedのサブクラスのインスタンスの参照を二つ持って、また、オーバライドしたメソッドinsideではその二つに対してinsideが成立するかを返すようにする。また、インタフェースUpperBoundedを実装するかつ、FunctionQIクラスの派生クラスであるProportionalクラスとQuadrantでは、関数を文字列化して返すオーバライドしたメソッドtoStringと、関数値f(x)を返却するオーバライドしたメソッドfと、insideが成り立つかどうか返すオーバライドしたメソッドinsideを実装する。テスタークラスでは、モンテカルロ法を用いて面積の近似値を求めるメソッドareaをつくり、メインメソッドでは、UpperBounded型の配列にに，Proportional，Quadrant, Andインスタンスの参照を格納して、それぞれ内容を表示し、もし、その要素がFunctionQIのインスタンスなら、f(x)をxを様々な値にして出力し、最後に、面積を出力する。
Quadrantクラスでメソッドinsideをオーバーライドせずにコンパイルしようとするとコンパイルエラーが起きた。(コンパイル出来なかった)Quadrantクラスは、インターフェースUpperBoundedの実行クラスであるので、インターフェースにおける抽象メソッドをオーバーライドすることを強制されたがために、insideをオーバライドしないとエラーが起きるのだと考えられる。

[まとめ]

[理解度]
B
[感想]

[特記事項]