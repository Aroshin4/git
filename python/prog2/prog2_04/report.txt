[プログラムの説明]
<演習1>
Semicircleクラスの親クラスであるShapeクラスは、抽象クラスであり、クラス内で図形情報を表す文字列を返却する抽象メソッドtoString()と、図形を描画するための抽象メソッド draw()を持っている。このことより、Shapeクラス内で、toString()メソッドを実装し、またその派生クラス内でdraw()メソッドを実装することを考える。まず、Semicircleクラスでは半径を表すフィールドradiusをつくり、そのradiusのセッタ、ゲッタを実装する。また、半径の値を初期化するコンストラクタを持つようにする。そして、その派生クラスRightSemicircleでは右半円を表す文字列を返すtoString()メソッドを作り、図形を書く用のメソッドdrow()を実装する。この際、右半円の中心がどこにあるかを考えてつくる。また、同じくSemicircleクラスの派生クラスであるUpperSemicircleクラスでも、上半円を表す文字列を返すtoString()メソッドを作り、図形を書く用のメソッドdrow()を実装する。テスタークラスではもともと実装されていた形に加える形で右半円、上半円を選べるようにしてそれぞれprint()メソッドで描けるようにする。
<演習2>
抽象クラスJankenPlayerクラスでは、引数も戻り値も持たない、じゃんけんでだす手を決める抽象メソッドhand()とじゃんけんする人の名前を決める抽象メソッドname()をつくる。JankenPlayerクラスの派生クラスであるComputerPlayerクラスではコンピュータの名前を表すフィールドnameとそれを初期化するコンストラクタを実装する。次に、親クラスで形だけ実装した抽象メソッドname()より、その名前をかえすname()メソッド、ランダム関数を使いじゃんけんでだす手を決め、数字で返すhand()メソッドをComputerPlayerクラスでもつくる。また、同じくJankenPlayerクラスの派生クラスであるHumanPlayerでも名前を表すフィールドnameをつくり、それを初期化するコンストラクタを実装する。そして、このクラスでも設定した名前をかえすname()メソッド、キーボードに入力した数字によってじゃんけんでだす手を決めて数字で返すメソッドhand()を実装する。ゲームを実行するクラスでは、勝ち負けを判定するためのフィールドjudgeとじゃんけんを繰り返すかどうかを判定するのに使うフィールドretryをつくる。次に、先ほど作ったコンストラクタを使い、コンピュータの名前、自分の名前を決める。また、配列の要素番号とhand()メソッドで返す値を対応させるためにグー, チョキ, パーを配列の要素とする配列handsをつくる。do文で先ほど作ったhand()メソッドで自分、コンピュータのだす手を設定して、誰がどの手を出したか分かるように文字列で出力できるようにした。そして、人間の勝ち、あいこ、コンピュータの勝ちによって、judge、retryの値を変えて、どうやって出力するか決めて、かつdo文を繰り返すかどうか決める。
<課題>
まず、抽象クラスであるEquationをつくり、識別名として関数の名称を持つためフィールドname、引数も戻り値も持たない式の内容を表示するため抽象メソッドprint()、引数も戻り値も無い方程式の解を表示するため抽象メソッドsolveをつくる。そして、nameを取得するメソッドgetNameとnameを初期化するコンストラクタEquationを実装する。線形方程式を解くEquationクラスの派生クラスであるLinearEquationクラスでは、式の係数を表すフィールドa,bをつくり、コンストラクタでsuperクラスのフィールドname、先ほどのフィールドa,bを初期化するようにした。そして、親クラスの抽象メソッドで形だけ作っておいたprint()メソッドで、getNameメソッドを使い、式を文字列で表せるようにする。また、同じく抽象メソッドで形だけ作っておいたsolve()メソッドではa=0でないと仮定して解をもとめ、出力するようにした。二次方程式を解くEquationクラスの派生クラスであるQuadraticEquationクラスでは、、式の係数を表すフィールドa,b,c、虚数の判定に使うフィールドiをつくり、コンストラクタでsuperクラスのフィールドname先ほどのフィールドa,b,cを初期化するようにした。そして、先ほどと同じようにprint()メソッドをつくり、solve()メソッドは、解の公式のルートの中を変数inとして、それが負の数だったらin=-inとしてi=1とする。そしてもし、i=1だとしたら虚数になるとして、Math.sqrt(in)/ (2 * a)にiをつけて出力するようにする。三角方程式を解くEquationクラスの派生クラスであるTrigonometricEquationクラスでは、式の定数をフィールドaとしてつくり、、コンストラクタでsuperクラスのフィールドname、先ほどのフィールドaを初期化できるようにする。そして、先ほどと同様にprint()メソッドをつくり、solve()メソッドでは、逆三角関数の結果を使い、解を求め、出力する。テスタークラスではEquationの要素が3つの配列equationsをつくり、それぞれ各クラスのインスタンスの参照を格納し、最後にfor文内のprintメソッド、solveメソッドで全て出力する。出力では、解が重解である場合、虚数になる場合も含めるようにした。この際、メソッドの参照先は問題なく、それぞれ正しく出力することができた。
[まとめ]
抽象クラス、抽象メソッドの性質について学んだ。抽象メソッドを具象クラスで扱うことは出来ず、抽象メソッドは抽象クラスでしか実装できないことを今回のプログラムで試してみて理解した。また、抽象クラスのインスタンスは作ることができないことから、抽象クラスは、実体的なオブジェクトを作ることができない概念を扱うものであると考えた。そして、抽象クラスの抽象メソッドで重要なことが、親クラスで抽象メソッドを作ることで派生クラスに同名のメソッドを実装させるのを強制できることである。また、親クラスの非抽象メソッドを，抽象メソッドとしてオーバーライドできることにより、toStringメソッド等Objectクラスの非抽象メソッドでも下位クラスに、実装を強制することができる。最後に、文書化コメントjavaソースコードに書くことではプログラムの機能を説明したドキュメントを生成する際に使えることを学んだ。
[理解度]
B
[感想]

[特記事項]
