[プログラムの説明]
<演習1>
Semicircleクラスの親クラスであるShapeクラスは、抽象クラスであり、クラス内で図形情報を表す文字列を返却する抽象メソッドtoString()と、図形を描画するための抽象メソッド draw()を持っている。このことより、Shapeクラス内で、toString()メソッドを実装し、またその派生クラス内でdraw()メソッドを実装することを考える。まず、Semicircleクラスでは半径を表すフィールドradiusをつくり、そのradiusのセッタ、ゲッタを実装する。また、半径の値を初期化するコンストラクタを持つようにする。そして、その派生クラスRightSemicircleでは右半円を表す文字列を返すtoString()メソッドを作り、図形を書く用のメソッドdrow()を実装する。この際、右半円の中心がどこにあるかを考えてつくる。また、同じくSemicircleクラスの派生クラスであるUpperSemicircleクラスでも、上半円を表す文字列を返すtoString()メソッドを作り、図形を書く用のメソッドdrow()を実装する。テスタークラスではもともと実装されていた形に加える形で右半円、上半円を選べるようにしてそれぞれprint()メソッドで描けるようにする。
<演習2>
抽象クラスJankenPlayerクラスでは、引数も戻り値も持たない、じゃんけんでだす手を決める抽象メソッドhand()とじゃんけんする人の名前を決める抽象メソッドname()をつくる。JankenPlayerクラスの派生クラスであるComputerPlayerクラスではコンピュータの名前を表すフィールドnameとそれを初期化するコンストラクタを実装する。次に、親クラスで形だけ実装した抽象メソッドname()より、その名前をかえすname()メソッド、ランダム関数を使いじゃんけんでだす手を決め、数字で返すhand()メソッドをComputerPlayerクラスでもつくる。また、同じくJankenPlayerクラスの派生クラスであるHumanPlayerでも名前を表すフィールドnameをつくり、それを初期化するコンストラクタを実装する。そして、このクラスでも設定した名前をかえすname()メソッド、キーボードに入力した数字によってじゃんけんでだす手を決めて数字で返すメソッドhand()を実装する。ゲームを実行するクラスでは、勝ち負けを判定するためのフィールドjudgeとじゃんけんを繰り返すかどうかを判定するのに使うフィールドretryをつくる。次に、先ほど作ったコンストラクタを使い、コンピュータの名前、自分の名前を決める。また、配列の要素番号とhand()メソッドで返す値を対応させるためにグー, チョキ, パーを配列の要素とする配列handsをつくる。do文で先ほど作ったhand()メソッドで自分、コンピュータのだす手を設定して、誰がどの手を出したか分かるように文字列で出力できるようにした。そして、人間の勝ち、あいこ、コンピュータの勝ちによって、judge、retryの値を変えて、どうやって出力するか決めて、かつdo文を繰り返すかどうか決める。
[まとめ]

[理解度]

[感想]

[特記事項]
