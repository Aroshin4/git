[プログラムの説明]
<課題1>
動的計画法のクラスFiboDPでは、まずfibonメソッドにおいて、要素がn+1このint型の配列をつくり、2つめと3つめのの要素に1を代入する。そしてfor文で1つ前の要素の値と2つ前の要素の値の和を求めていって、配列のn+1番目の要素まで求めその値を返す。メインメソッドでは、コマンドライン引数が正しく入力されているか判定して、正しくない場合は使用法を出力する。次に、処理の始まりの時の時刻を計測し、コマンドライン引数を用いてfibonメソッドを呼び出す。呼び出したら終了時の時刻を計測し、終わりの時刻から始まりの時刻を引いたものをナノ秒単位で求め、fibonメソッドから帰ってきた値と共に出力する。再起法のクラスFiboRecでは、まず 、fibonメソッドにおいて、与えられた値が2以下だとしたら1を返し、2より大きかったらn-1を与えたfibonメソッドで帰ってきた値とn-2を与えたfibonメソッドで帰ってきた値を足したものを返すようにする。メインメソッドでは、先程と同じくコマンドライン引数が正しく入力されているかを判定して、正しくない場合は使用法を出力する。次に、処理の始まりの時刻を計測し、先程と同じくコマンドライン引数を用いてfibonメソッドを呼び出す。呼び出したら終了時の時刻を計測し、終わりの時刻から始まりの時刻を引いたものをナノ秒単位で求めて、fibonメソッドから帰ってきた値とともに出力する。最後に、eval1.shを実行した結果（ログ）をeval1.logに書き出す、今回はeval1.shのプログラムに書き加えて.logに書き出したが、実行時のコマンドで.logに書き出すこともできる。
[確認事項]
nの数が大きくなっていくとともに、圧倒的に再起法のほうが計算時間が大きくなった。動的計画法は、答えとなる値を直接計算しようとしているのに対して、再起法は答えとなる値を求めるのに、その前までの値を求めるのに使った処理をもう一度使って求めているので計測時間に大きな差がでたのでは無いかと考えた。
<課題2>
まず、KPクラスでは各データを表すフィールドを用意した後に、ファイルの読み込みを行う。inputファイルの入力の形式を確認し、それぞれ先ほど用意した各フィールドに格納していく。ファイルの読み込みが終わったらSolverクラスのインスタンスsをつくり、Solverクラスで作ったsolveメソッドを使い、フィールドanswerに処理結果を代入する。そして、最後に、answerを出力する。次に、Solverクラスでは、先ほどと同様各データを表すフィールドを用意した後に、アイテムの数、重さ、価値、およびナップサックの容量を引数として受け取り、これらの値をフィールドに設定するコンストラクタをつくる。
[まとめ]

[理解度]

[感想]

[特記事項]
